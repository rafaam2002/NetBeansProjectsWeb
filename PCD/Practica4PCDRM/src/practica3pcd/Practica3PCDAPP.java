/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package practica3pcd;

import java.awt.Color;
import static java.lang.Thread.sleep;
import pila.Consumidor;
import pila.PilaLenta;
import pila.Productor;

/**
 *
 * @author rafaa
 */
public class Practica3PCDAPP extends java.awt.Frame {

    private static final int CAPACIDADPILA = 10; //Se creara una pila con esta capacidad y se mostrara en pantalla

    private static final MiCanvas cv = new MiCanvas(800, 700, CAPACIDADPILA); //aqui se pasa alto ancho y capacidad de la pila;
                                                                                            
    /**
     * Creates new form Practica3PCDAPP
     */
    public Practica3PCDAPP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Practica3PCDAPP f = new Practica3PCDAPP();
        f.setTitle("Practica 3");
        f.setSize(800, 700);
        f.setBackground(Color.yellow);
        f.setLocation(100, 50); //(0,0) ->arriba a la izquierda primer pixel

        f.add(cv);
        f.setVisible(true);
        //boolean[] hilosEnEspera = {false, false, false, false};
        PilaLenta pila = new PilaLenta(CAPACIDADPILA, cv, 800, 700);

        Productor p1 = new Productor(pila, cv, 10, "P1");//Formato del nombre [numero]
        Productor p2 = new Productor(pila, cv, 10, "P2");
        Productor p3 = new Productor(pila, cv, 10, "P3");
        Productor p4 = new Productor(pila, cv, 10, "P4");

        Consumidor consumidor1 = new Consumidor(pila, cv, 10, "C1");//Formato [numero]
        Thread c1 = new Thread(consumidor1);
        Consumidor consumidor2 = new Consumidor(pila, cv, 10, "C2");
        Thread c2 = new Thread(consumidor2);
        
        p2.start();
        p3.start();
        p4.start();
        c1.start();

        try {
            c1.join();
        } catch (InterruptedException ex) {
            System.out.println("Esperando a c1" + ex.getMessage());
        }
//        for (int i = 0; i < hilosEnEspera.length; i++) {
//            while(!hilosEnEspera[i]);
//        }
        try {
            sleep(3100);
        } catch (InterruptedException ex) {
            System.out.println("No se pudo hacer el sleep" + ex.getMessage());
        }
        for (int i = 0; i < 3; i++) {
            try {
                sleep(100);
            } catch (InterruptedException ex) {
                System.out.println("No se pudo hacer el sleep" + ex.getMessage());
            }
            synchronized (pila) {
                pila.notifyAll();
            }
        }

        try {
            p1.join();
        } catch (InterruptedException ex) {
            System.out.println("Esperando a p1" + ex.getMessage());
        }
        try {
            p2.join();
        } catch (InterruptedException ex) {
            System.out.println("Esperando a p2" + ex.getMessage());
        }
        try {
            p3.join();
        } catch (InterruptedException ex) {
            System.out.println("Esperando a p3" + ex.getMessage());
        }
        try {
            p4.join();
        } catch (InterruptedException ex) {
            System.out.println("Esperando a p4" + ex.getMessage());
        }

        pila.muestraPila();
        try {
            sleep(3000);
        } catch (InterruptedException ex) {
            System.out.println("No se pudo hacer el sleep" + ex.getMessage());
        }
        System.exit(0);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
